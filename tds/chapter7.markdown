---
title: Chapter 6 - TDS Classic Documentation
layout: TdsLayout
---
# TDS Classic

## Chapter 7 – Web Deploy files
TDS Classic can generate WebDeploy packages at build time. These packages can contain compiled C# projects and Sitecore items. The WebDeploy package generated by TDS supports all TDS functions, and the result of installing a TDS WebDeploy package has the same result as installing an update package generated by TDS classic or pointing TDS at the server and building to the server.

There are many aspects to deploying a Sitecore website. TDS classic tries to automate some of the more difficult parts of the deployment process, but will not be a complete end-to-end solution. The developer will still need to setup build and deployment pipelines using their preferred build and deployment automation tools. TDS classic is designed to be easily integrated into the deployment process.

### Deployment process
When TDS Classic generates a WebDeploy package containing items, the items are stored in the package in a folder under the /temp/WebDeployItems folder. These files are installed in Sitecore when the server restarts after the WebDeploy package is deployed.

The WebDeploy package also contains an assembly in the /bin folder that performs the deployment. This assembly also installs a WebAPI service to allow the deployment to be monitored. The WebAPI service can also remove itself after the deployment. See below for more details on the WebAPI service.

### Building WebDeploy packages
TDS Classic can be configured to build WebDeploy packages simply by enabling WebDeploy package generation in the [WebDeploy package](./chapter4.html#webdeploy-package) tab of the TDS Classic property pages.

The package is generated in a the folder path **/bin/WebDeploy_[Configuration name]**. The package is named **[Package name].wdp.zip**. 

TDS also adds a file called **PublishWebDeploy.ps1**. This file contains scripts that can be used to deploy the web deploy package on a Sitecore server. This can be run standalone or on a build server.

### Deployment Powershell Script
The **PublishWebDeploy.ps1** script installs the package on a server using MSDeploy. It also uses the WebAPI exposed by the item installer assembly to monitor the installation of the item in the package.

The **PublishWebDeploy.ps1** script will wait until all items in the deployment are installed on the server. It can also display verbose installation logs from the server so the developer can monitor and/or log the progress of the items being installed.

The **PublishWebDeploy.ps1** script supports the following parameters:

* **PackagePath** - Path to the WebDeploy package to install. This parameter is optional, and if left out, the script will only monitor the package installation. This is useful on build/deployment servers that support installing the WebDeploy packages.
* **PublishSettingsPath** - Path to a .publishsettings file. This file can be generated by Azure or through the WebDeploy configuration console. This parameter is optional, but if it isn't specified, the user must specify the parameters **ComputerName**, **SiteName**, **UserName** and **Password**. The advantage to using .publishsetting files generated by Azure is that the credentials are encrypted in the file, preventing them from showing up in build logs.
* **MSDeployAllowUntrusted** - Adds the -AllowUntrusted switch to the MSDeploy command. By default, MSDeploy requires a valid https certificate on the server. In some cases, the server may have a self-signed certificate and this setting allows MSDeploy to proceed with the deployment even though the certificate isn't valid.
* **Username** - The username used by MSDeploy to authenticate to the server. This needs to be supplied to the script if the **PublishSettingsPath** is not specified.
* **Password** - The password used by MSDeploy to authenticate to the server. This needs to be supplied to the script if the **PublishSettingsPath** is not specified.
* **ComputerName** - The name of the computer MSDeploy will publish to. This name will also be used to monitor the deployment. This needs to be supplied to the script if the **PublishSettingsPath** is not specified.
* **SiteName** - The name of the IIS website where MSDeploy is installing the WebDeploy package. This needs to be supplied to the script if the **PublishSettingsPath** is not specified.
* **AuthType** - The Authentication type used to authenticate the username and password. The two values for this are 'Basic' and 'NTLM'. This needs to be supplied to the script if the **PublishSettingsPath** is not specified.
* **UseHttp** - If this switch is specified, MSDeploy uses http to communicate with the Web Deployment agent instead of https.
* **ViewLogs** - If this switch is specified, installation status messages are displayed as the item installation progresses.
* **Remove** - When this switch is specified, the installation assembly is removed from the /bin folder once the deployment is complete.
 
### PaaS deployment to Azure
Sitecore PaaS Azure instances use App Services to host the various Sitecore instances. This offers a number of advantages to managing the servers in Azure. One of the benefits to deployment is the installation and configuration of Web Deploy is built in automatically. 

The Azure App Service can generate a .publishsettings file that will be used by the **PublishWebDeploy.ps1** script. The .publishsettings file contains the fully qualified server name and credentials MSDeploy needs to deploy the WebDeploy package.

To generate a .publishsettings file, open the App Service in the Azure dashboard and click on the "Get publish profile" button:

![](/Images/Tds/chapter7-getpublishprofile.png)

**Please note:** If "Reset publish profile" is clicked, any existing publish profiles will cease to work, causing the deployment to fail.

the **PublishWebDeploy.ps1** script can be used to deploy to a Sitecore instance using the publish profile from Azure:

	.\PublishWebDeploy.ps1 -PackagePath .\MyPackage.wdp.zip -PublishSettingsPath .\MyAzure.PublishSettings -ViewLogs

This will deploy the package to the Azure App Service specified in the publish settings and display progress logs. Once the deployment is complete, the script will terminate.

### PaaS deployment using a VSO Release Pipeline
Visual Studio online allows users to create and manage very powerful release pipelines. Utilizing the WebDeploy packages created by TDS Classic in a release pipeline is very simple. In our sample release pipeline, we only had two steps:

![](/Images/Tds/chapter7-vsopipelinesteps.png)

The first step deploys the web deploy package using the VSO Azure App Service deployment step instead of the powershell script.

![](/Images/Tds/chapter7-azureappservicedeploy.png)

There are no hidden settings in the collapsed sections of the tasks.

The second step runs the powershell script supplied by TDS Classic:

![](/Images/Tds/chapter7-powershellscript.png)

### IaaS or Standalone deployments
The WebDeploy packages created by TDS Classic are not tied to the Azure infrastructure, so they can be used on any server that supports Web Deploy. This allows the same packages and scripts to be used across multiple environments, following best practices in release management.

The biggest challenge to using Web Deploy scripts on environments other than Azure is setting up Web Deploy. There are many resources on the web for this, so I will not reproduce the steps here. Here are the websites I found useful:

* https://serverfault.com/questions/756068/webdeploy-3-6-wont-connect-with-tls-1-0-disabled
* https://docs.microsoft.com/en-us/aspnet/web-forms/overview/deployment/configuring-server-environments-for-web-deployment/configuring-a-web-server-for-web-deploy-publishing-web-deploy-handler
* https://docs.microsoft.com/en-us/iis/publish/troubleshooting-web-deploy/troubleshooting-common-problems-with-web-deploy
* https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/ee461173(v=ws.10)

<div class="panel">
 <div class="panel-header bg-lightBlue fg-white">
 NOTE
 </div>
 <div class="panel-content">
<p>
The first link, shows how to switch the client machine to use TLS 1.2. Sitecore specifies that TLS 1.0 and 1.1 are disabled on the server, and MSDeploy defaults to TLS 1.0. I found this issue difficult to track down because MSDeploy would not communicate with my server at all until I forced it to TLS 1.2. Once I was communicating with the server, there were a few authentication issues to resolve. These are covered in the other blogs.
</p>
</div></div>

Once Web Deploy is working on the server, installing the package works much like the example above:

	.\PublishWebDeploy.ps1 -PackagePath .\HHogSSSS.Master.wdp.zip -ComputerName MyServer -Username DeployUser -Password MyPassword -SiteName MySite -AuthType Basic -MSDeployAllowUntrusted -ViewLogs 

This example uses explicit connection information instead of a publish settings file. 

<div class="panel">
 <div class="panel-header bg-lightBlue fg-white">
 NOTE
 </div>
 <div class="panel-content">
<p>
When configuring Web Deploy on a server, you can generate a .publishsettings file. This file contains everything needed to deploy except the password. If you use this file, you can specify <b>-PublishSettingsPath</b> and <b>-Password</b>.
</p>
</div></div>










